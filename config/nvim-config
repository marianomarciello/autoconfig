call plug#begin('~/.config/nvim/plugged')

" latex syntax latex preview with \ll
Plug 'lervag/vimtex', { 'for': 'tex' }
" themes
Plug 'morhetz/gruvbox'
Plug 'whatyouhide/vim-gotham'
Plug 'folke/tokyonight.nvim'
" vimwiki
Plug 'vimwiki/vimwiki'
" vim hex color
Plug 'ap/vim-css-color'

" youcomplete me
"Plug 'ycm-core/YouCompleteMe'
" coc
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" nerdtree
Plug 'preservim/nerdtree'

Plug 'airblade/vim-gitgutter'

Plug 'jceb/vim-orgmode'
" telescope
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'rust-lang/rust.vim'

" status bar
Plug 'nvim-lualine/lualine.nvim'
" If you want to have icons in your statusline choose one of these
Plug 'nvim-tree/nvim-web-devicons'


" snippets
Plug 'L3MON4D3/LuaSnip', {'tag': 'v2.*', 'do': 'make install_jsregexp'} " Replace <CurrentMajor> by the latest released major (first number of latest release)
call plug#end()

" == General vim settings (start) ==
set rnu
set nu
set termguicolors
set cc=80
noremap zz : w<CR>
set nocompatible
" super funky exit
imap jk <Esc>
" change mapleader
let mapleader = " "
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab
" redundat space at the end of the line
syn match RedundantSpaces /\s\+$/
command! RedundantSpace : highlight RedundantSpaces ctermbg=red guibg=red

filetype plugin indent on
" Highlight trailing spaces
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

noremap <silent> <leader>k :wincmd k<CR>
noremap <silent> <leader>j :wincmd j<CR>
noremap <silent> <leader>h :wincmd h<CR>
noremap <silent> <leader>l :wincmd l<CR>
noremap <silent> <leader>= :wincmd =<CR>
" rotate
noremap <silent> <leader>J :wincmd J<CR>
" rotate
noremap <silent> <leader>H :wincmd H<CR>
noremap <silent> <leader>s :split   <CR>
noremap <silent> <leader>v :vsplit   <CR>
noremap <silent> <leader>q :quit<CR>
nnoremap <leader>pv :Lex<CR>

" We don't need NERDTREE
" Vexplore
let g:netrw_banner = 0 " suppress ungly banner
let g:netrw_liststyle = 3
let g:netrw_browse_split = 0
let g:netrw_altv = 1
let g:netrw_winsize = 25

" Relative or absolute number toggle
function! NumberToggle()
    if(&nu == 1 && &rnu == 1)
        set nu!
        set rnu!
    else
        set rnu
        set nu
    endif
endfunction

nnoremap <leader>n :call NumberToggle()<CR>

"colorscheme molokai
"colorscheme gruvbox
"colorscheme elflord
"colorscheme 256_noir
"colorscheme gotham
colorscheme tokyonight-night
set background=dark

" autoclosing stuff like quotes and brackets
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
" == General vim settings (end) ==

"    ____  __            _               __               __             __
"   / __ \/ /_  ______ _(_)___     _____/ /_  ____  _____/ /________  __/ /_
"  / /_/ / / / / / __ `/ / __ \   / ___/ __ \/ __ \/ ___/ __/ ___/ / / / __/
" / ____/ / /_/ / /_/ / / / / /  (__  ) / / / /_/ / /  / /_/ /__/ /_/ / /_
"/_/   /_/\__,_/\__, /_/_/ /_/  /____/_/ /_/\____/_/   \__/\___/\__,_/\__/
"              /____/

" vimwiki settings
syntax on
filetype plugin on
let g:automatic_nested_syntaxes = 1
let g:vimwiki_list =
			\ [{'path' : '~/Projects/my_wiki/'}]
 " latex-previe
let g:vimtex_view_general_viewer= 'zathura'

" coc
" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)
" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Remap to trigger coc autocomplition
" use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" tab -> next suggestion
" s-tab -> prev suggestion
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" Coc explorer
noremap <leader>t <Cmd>CocCommand explorer<cr>

" Telescope
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fG <cmd>Telescope grep_string<cr>

" GitGutter
" Disable all gitgutter key mapping (I want only info)
let g:gitgutter_map_keys = 0
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
nmap [u <Plug>(GitGutterUndoHunk)

lua << END
local ok, _ = pcall(require, 'my-modules')
if not ok then
    -- not loaded
    echo "[Error] during my-modules load"
end
END
